generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum EventStatus {
  OFFLINE
  ONLINE
}

enum WorkshopStatus {
  LIVE
  PLAYBACK
}

enum CartType {
  WEBINAR
  WORKSHOP
  TRAINING
}

model Account {
  id                  String    @id @default(uuid()) @db.Uuid
  fullname            String
  username            String?
  email               String    @unique
  password            String
  role                Role
  phone               String?
  address             String?
  birthdate           DateTime? @map("birth_date")
  gender              Gender?
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  organization        String?
  university          String?
  passwordResetExpiry DateTime? @map("password_reset_expiry")
  passwordResetToken  String?   @map("password_reset_token")
  carts               Cart[]    @relation("carts.account_id_TO_accounts")
  orders              Order[]   @relation("orders.account_id_TO_accounts")

  @@map("accounts")
}

model Category {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @unique
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  training  Training[] @relation("trainings.category_id_TO_categories")
  webinars  Webinar[]  @relation("webinars.category_id_TO_categories")
  workshop  Workshop[] @relation("workshops.category_id_TO_categories")

  @@map("categories")
}

model SubCategory {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @unique
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  training  Training[] @relation("trainings.sub_category_id_TO_sub_categories")
  webinars  Webinar[]  @relation("webinars.sub_category_id_TO_sub_categories")
  workshop  Workshop[] @relation("workshops.sub_category_id_TO_sub_categories")

  @@map("sub_categories")
}

model Webinar {
  id                   String           @id @default(uuid()) @db.Uuid
  title                String
  banner               String
  description          String
  startTime            DateTime         @map("start_time") @db.Timestamptz(6)
  endTime              DateTime         @map("end_time") @db.Timestamptz(6)
  eventStatus          EventStatus      @map("event_status")
  maxAttendees         Int              @map("max_attendees")
  lastWebinarHistoryId String           @unique @map("last_webinar_history_id") @db.Uuid
  certificate          String?
  categoryId           String?          @map("category_id") @db.Uuid
  subCategoryId        String?          @map("sub_category_id") @db.Uuid
  createdAt            DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  carts                Cart[]           @relation("carts.product_id_TO_webinars")
  DetailOrder          DetailOrder[]    @relation("detail_orders.webinar_id_TO_webinars")
  webinarHistories     WebinarHistory[] @relation("webinar_histories.webinar_id_TO_webinars")
  category             Category?        @relation("webinars.category_id_TO_categories", fields: [categoryId], references: [id], onUpdate: SetNull)
  lastWebinarHistory   WebinarHistory   @relation("webinars.last_webinar_history_id_TO_webinar_histories", fields: [lastWebinarHistoryId], references: [id], onUpdate: Restrict)
  subCategory          SubCategory?     @relation("webinars.sub_category_id_TO_sub_categories", fields: [subCategoryId], references: [id], onUpdate: SetNull)

  @@map("webinars")
}

model WebinarHistory {
  id          String   @id @default(uuid()) @db.Uuid
  price       Decimal  @db.Decimal
  webinarId   String?  @map("webinar_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  discount    Decimal? @db.Decimal
  webinar     Webinar? @relation("webinar_histories.webinar_id_TO_webinars", fields: [webinarId], references: [id], onUpdate: SetNull)
  lastWebinar Webinar? @relation("webinars.last_webinar_history_id_TO_webinar_histories")

  @@map("webinar_histories")
}

model Workshop {
  id                    String            @id @default(uuid()) @db.Uuid
  title                 String
  banner                String
  description           String
  instructor            String
  status                WorkshopStatus
  startTime             DateTime?         @map("start_time") @db.Timestamptz(6)
  endTime               DateTime?         @map("end_time") @db.Timestamptz(6)
  lastWorkshopHistoryId String            @unique @map("last_workshop_history_id") @db.Uuid
  certificate           String?
  categoryId            String?           @map("category_id") @db.Uuid
  subCategoryId         String?           @map("sub_category_id") @db.Uuid
  createdAt             DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  playbackUrl           String?           @map("playback_url")
  carts                 Cart[]            @relation("carts.workshop_id_TO_workshops")
  DetailOrder           DetailOrder[]     @relation("detail_orders.workshop_id_TO_workshops")
  workshopHistories     WorkshopHistory[] @relation("workshop_histories.workshop_id_TO_workshops")
  category              Category?         @relation("workshops.category_id_TO_categories", fields: [categoryId], references: [id], onUpdate: SetNull)
  lastWorkshopHistory   WorkshopHistory   @relation("workshops.last_workshop_history_id_TO_workshop_histories", fields: [lastWorkshopHistoryId], references: [id], onUpdate: Restrict)
  subCategory           SubCategory?      @relation("workshops.sub_category_id_TO_sub_categories", fields: [subCategoryId], references: [id], onUpdate: SetNull)

  @@map("workshops")
}

model WorkshopHistory {
  id           String    @id @default(uuid()) @db.Uuid
  price        Decimal   @db.Decimal
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  discount     Decimal?  @db.Decimal
  workshopId   String?   @map("workshop_id") @db.Uuid
  workshop     Workshop? @relation("workshop_histories.workshop_id_TO_workshops", fields: [workshopId], references: [id], onUpdate: SetNull)
  lastWorkshop Workshop? @relation("workshops.last_workshop_history_id_TO_workshop_histories")

  @@map("workshop_histories")
}

model Training {
  id                    String             @id @default(uuid()) @db.Uuid
  title                 String
  banner                String
  description           String
  status                String?
  certificate           String?
  syllabus              String?
  urlExternalTitle      String?
  urlExternal           String?
  startTime             DateTime?          @map("start_time") @db.Timestamptz(6)
  endTime               DateTime?          @map("end_time") @db.Timestamptz(6)
  lastTrainingHistoryId String             @unique @map("last_training_history_id") @db.Uuid
  categoryId            String?            @map("category_id") @db.Uuid
  subCategoryId         String?            @map("sub_category_id") @db.Uuid
  createdAt             DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  showPrice             Boolean?           @map("show_price")
  carts                 Cart[]             @relation("carts.training_id_TO_trainings")
  DetailOrder           DetailOrder[]      @relation("detail_orders.training_id_TO_trainings")
  trainingHistories     TrainingHistory[]  @relation("training_histories.training_id_TO_trainings")
  category              Category?          @relation("trainings.category_id_TO_categories", fields: [categoryId], references: [id], onUpdate: SetNull)
  lastTrainingHistory   TrainingHistory    @relation("trainings.last_training_history_id_TO_training_histories", fields: [lastTrainingHistoryId], references: [id], onUpdate: Restrict)
  subCategory           SubCategory?       @relation("trainings.sub_category_id_TO_sub_categories", fields: [subCategoryId], references: [id], onUpdate: SetNull)
  TrainingMaterial      TrainingMaterial[] @relation("training_materials.training_id_TO_trainings")

  @@map("trainings")
}

model TrainingHistory {
  id           String    @id @default(uuid()) @db.Uuid
  price        Decimal   @db.Decimal
  discount     Decimal?  @db.Decimal
  trainingId   String?   @map("training_id") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  training     Training? @relation("training_histories.training_id_TO_trainings", fields: [trainingId], references: [id], onUpdate: SetNull)
  lastTraining Training? @relation("trainings.last_training_history_id_TO_training_histories")

  @@map("training_histories")
}

model Cart {
  id         String    @id @default(uuid()) @db.Uuid
  type       CartType  @map("type")
  accountId  String    @map("account_id") @db.Uuid
  webinarId  String?   @map("webinar_id") @db.Uuid
  workshopId String?   @map("workshop_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  trainingId String?   @map("training_id") @db.Uuid
  account    Account   @relation("carts.account_id_TO_accounts", fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  training   Training? @relation("carts.training_id_TO_trainings", fields: [trainingId], references: [id], onUpdate: NoAction)
  webinar    Webinar?  @relation("carts.product_id_TO_webinars", fields: [webinarId], references: [id], onUpdate: NoAction)
  workshop   Workshop? @relation("carts.workshop_id_TO_workshops", fields: [workshopId], references: [id], onUpdate: NoAction)

  @@map("carts")
}

model Faq {
  id        String   @id @default(uuid()) @db.Uuid
  question  String
  answer    String
  icon      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  tag       String

  @@map("faqs")
}

model Video {
  id    String @id @default(uuid()) @db.Uuid
  title String
  url   String

  @@map("videos")
}

model Order {
  id           String        @id @default(uuid()) @db.Uuid
  accountId    String        @map("account_id") @db.Uuid
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  detailOrders DetailOrder[] @relation("detail_orders.order_id_TO_orders")
  account      Account       @relation("orders.account_id_TO_accounts", fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("orders")
}

model DetailOrder {
  id         String    @id @default(uuid()) @db.Uuid
  type       CartType  @map("type")
  orderId    String    @map("order_id") @db.Uuid
  webinarId  String?   @map("webinar_id") @db.Uuid
  workshopId String?   @map("workshop_id") @db.Uuid
  trainingId String?   @map("training_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  order      Order     @relation("detail_orders.order_id_TO_orders", fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  training   Training? @relation("detail_orders.training_id_TO_trainings", fields: [trainingId], references: [id], onUpdate: NoAction)
  webinar    Webinar?  @relation("detail_orders.webinar_id_TO_webinars", fields: [webinarId], references: [id], onUpdate: NoAction)
  workshop   Workshop? @relation("detail_orders.workshop_id_TO_workshops", fields: [workshopId], references: [id], onUpdate: NoAction)

  @@map("detail_orders")
}

model Banner {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  url       String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("banners")
}

model TrainingMaterial {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String?
  url         String?
  trainingId  String?  @map("training_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Outgoing Relations
  // Many to One
  training Training? @relation("training_materials.training_id_TO_trainings", fields: [trainingId], references: [id], onUpdate: NoAction, onDelete: Cascade)

  @@map("training_materials")
}
