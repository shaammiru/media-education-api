// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

model Account {
  id                  String    @id @default(uuid()) @db.Uuid
  fullname            String
  username            String?
  email               String    @unique
  password            String
  passwordResetToken  String?   @map("password_reset_token")
  passwordResetExpiry DateTime? @map("password_reset_expiry")
  role                Role
  phone               String?
  address             String?
  birthdate           DateTime? @map("birth_date")
  organization        String?
  university          String?
  gender              Gender?
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Incoming Relations
  // One To Many
  carts  Cart[]  @relation("carts.account_id_TO_accounts")
  orders Order[] @relation("orders.account_id_TO_accounts")

  @@map("accounts")
}

enum EventStatus {
  OFFLINE
  ONLINE
}

enum WorkshopStatus {
  LIVE
  PLAYBACK
}

model Category {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Incoming Relations
  // One to Many
  webinars Webinar[]  @relation("webinars.category_id_TO_categories")
  workshop Workshop[] @relation("workshops.category_id_TO_categories")
  training Training[] @relation("trainings.category_id_TO_categories")

  @@map("categories")
}

model SubCategory {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  // Incoming Relations
  // One to Many
  webinars Webinar[]  @relation("webinars.sub_category_id_TO_sub_categories")
  workshop Workshop[] @relation("workshops.sub_category_id_TO_sub_categories")
  training Training[] @relation("trainings.sub_category_id_TO_sub_categories")

  @@map("sub_categories")
}

model Webinar {
  id                   String      @id @default(uuid()) @db.Uuid
  title                String
  banner               String
  description          String
  startTime            DateTime    @map("start_time") @db.Timestamptz()
  endTime              DateTime    @map("end_time") @db.Timestamptz()
  eventStatus          EventStatus @map("event_status")
  maxAttendees         Int         @map("max_attendees")
  lastWebinarHistoryId String      @unique @map("last_webinar_history_id") @db.Uuid
  certificate          String?
  categoryId           String?     @map("category_id") @db.Uuid
  subCategoryId        String?     @map("sub_category_id") @db.Uuid
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt            DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Incoming Relations
  // One to Many
  webinarHistories WebinarHistory[] @relation("webinar_histories.webinar_id_TO_webinars")
  carts            Cart[]           @relation("carts.product_id_TO_webinars")

  // Outgoing Relations
  // One to One
  lastWebinarHistory WebinarHistory @relation("webinars.last_webinar_history_id_TO_webinar_histories", fields: [lastWebinarHistoryId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  // Many to One
  category           Category?      @relation("webinars.category_id_TO_categories", fields: [categoryId], references: [id], onUpdate: SetNull, onDelete: SetNull)
  subCategory        SubCategory?   @relation("webinars.sub_category_id_TO_sub_categories", fields: [subCategoryId], references: [id], onUpdate: SetNull, onDelete: SetNull)
  DetailOrder        DetailOrder[]  @relation("detail_orders.webinar_id_TO_webinars")

  @@map("webinars")
}

model WebinarHistory {
  id        String   @id @default(uuid()) @db.Uuid
  price     Decimal  @db.Decimal()
  discount  Decimal? @db.Decimal()
  webinarId String?  @map("webinar_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Incoming Relations
  // One to One
  lastWebinar Webinar? @relation("webinars.last_webinar_history_id_TO_webinar_histories")

  // Outgoing Relations
  // Many to One
  webinar Webinar? @relation("webinar_histories.webinar_id_TO_webinars", fields: [webinarId], references: [id], onUpdate: SetNull, onDelete: SetNull)

  @@map("webinar_histories")
}

model Workshop {
  id                    String         @id @default(uuid()) @db.Uuid
  title                 String
  banner                String
  description           String
  instructor            String
  status                WorkshopStatus
  startTime             DateTime?      @map("start_time") @db.Timestamptz()
  endTime               DateTime?      @map("end_time") @db.Timestamptz()
  lastWorkshopHistoryId String         @unique @map("last_workshop_history_id") @db.Uuid
  playbackUrl           String?        @map("playback_url")
  certificate           String?
  categoryId            String?        @map("category_id") @db.Uuid
  subCategoryId         String?        @map("sub_category_id") @db.Uuid
  createdAt             DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt             DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Incoming Relations
  // One to Many
  workshopHistories WorkshopHistory[] @relation("workshop_histories.workshop_id_TO_workshops")
  carts             Cart[]            @relation("carts.workshop_id_TO_workshops")

  // Outgoing Relations
  // One to One
  lastWorkshopHistory WorkshopHistory @relation("workshops.last_workshop_history_id_TO_workshop_histories", fields: [lastWorkshopHistoryId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  // Many to One
  category            Category?       @relation("workshops.category_id_TO_categories", fields: [categoryId], references: [id], onUpdate: SetNull, onDelete: SetNull)
  subCategory         SubCategory?    @relation("workshops.sub_category_id_TO_sub_categories", fields: [subCategoryId], references: [id], onUpdate: SetNull, onDelete: SetNull)
  DetailOrder         DetailOrder[]   @relation("detail_orders.workshop_id_TO_workshops")

  @@map("workshops")
}

model WorkshopHistory {
  id         String   @id @default(uuid()) @db.Uuid
  price      Decimal  @db.Decimal()
  discount   Decimal? @db.Decimal()
  workshopId String?  @map("workshop_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Incoming Relations
  // One to One
  lastWorkshop Workshop? @relation("workshops.last_workshop_history_id_TO_workshop_histories")

  // Outgoing Relations
  // Many to One
  workshop Workshop? @relation("workshop_histories.workshop_id_TO_workshops", fields: [workshopId], references: [id], onUpdate: SetNull, onDelete: SetNull)

  @@map("workshop_histories")
}

model Training {
  id                    String    @id @default(uuid()) @db.Uuid
  title                 String
  banner                String
  description           String
  startTime             DateTime? @map("start_time") @db.Timestamptz()
  endTime               DateTime? @map("end_time") @db.Timestamptz()
  lastTrainingHistoryId String    @unique @map("last_training_history_id") @db.Uuid
  categoryId            String?   @map("category_id") @db.Uuid
  subCategoryId         String?   @map("sub_category_id") @db.Uuid
  showPrice             Boolean?  @map("show_price")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Incoming Relations
  // One to Many
  trainingHistories TrainingHistory[] @relation("training_histories.training_id_TO_trainings")
  carts             Cart[]            @relation("carts.training_id_TO_trainings")

  // Outgoing Relations
  // One to One
  lastTrainingHistory TrainingHistory @relation("trainings.last_training_history_id_TO_training_histories", fields: [lastTrainingHistoryId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  // Many to One
  category            Category?       @relation("trainings.category_id_TO_categories", fields: [categoryId], references: [id], onUpdate: SetNull, onDelete: SetNull)
  subCategory         SubCategory?    @relation("trainings.sub_category_id_TO_sub_categories", fields: [subCategoryId], references: [id], onUpdate: SetNull, onDelete: SetNull)
  DetailOrder         DetailOrder[]   @relation("detail_orders.training_id_TO_trainings")

  @@map("trainings")
}

model TrainingHistory {
  id         String   @id @default(uuid()) @db.Uuid
  price      Decimal  @db.Decimal()
  discount   Decimal? @db.Decimal()
  trainingId String?  @map("training_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Incoming Relations
  // One to One
  lastTraining Training? @relation("trainings.last_training_history_id_TO_training_histories")

  // Outgoing Relations
  // Many to One
  training Training? @relation("training_histories.training_id_TO_trainings", fields: [trainingId], references: [id], onUpdate: SetNull, onDelete: SetNull)

  @@map("training_histories")
}

enum CartType {
  WEBINAR
  WORKSHOP
  TRAINING
}

model Cart {
  id         String   @id @default(uuid()) @db.Uuid
  type       CartType @map("type")
  accountId  String   @map("account_id") @db.Uuid
  webinarId  String?  @map("webinar_id") @db.Uuid
  workshopId String?  @map("workshop_id") @db.Uuid
  trainingId String?  @map("training_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Outgoing Relations
  // Many To One
  account  Account   @relation("carts.account_id_TO_accounts", fields: [accountId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  webinar  Webinar?  @relation("carts.product_id_TO_webinars", fields: [webinarId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  workshop Workshop? @relation("carts.workshop_id_TO_workshops", fields: [workshopId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  training Training? @relation("carts.training_id_TO_trainings", fields: [trainingId], references: [id], onUpdate: NoAction, onDelete: SetNull)

  @@map("carts")
}

model Faq {
  id        String   @id @default(uuid()) @db.Uuid
  question  String
  answer    String
  tag       String
  icon      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  @@map("faqs")
}

model Video {
  id    String @id @default(uuid()) @db.Uuid
  title String
  url   String

  @@map("videos")
}

model Order {
  id        String   @id @default(uuid()) @db.Uuid
  accountId String   @map("account_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Outgoing Relations
  // Many To One
  account      Account       @relation("orders.account_id_TO_accounts", fields: [accountId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  detailOrders DetailOrder[] @relation("detail_orders.order_id_TO_orders")

  @@map("orders")
}

model DetailOrder {
  id         String   @id @default(uuid()) @db.Uuid
  type       CartType @map("type")
  orderId    String   @map("order_id") @db.Uuid
  webinarId  String?  @map("webinar_id") @db.Uuid
  workshopId String?  @map("workshop_id") @db.Uuid
  trainingId String?  @map("training_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  // Outgoing Relations
  // Many To One
  order    Order     @relation("detail_orders.order_id_TO_orders", fields: [orderId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  webinar  Webinar?  @relation("detail_orders.webinar_id_TO_webinars", fields: [webinarId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  workshop Workshop? @relation("detail_orders.workshop_id_TO_workshops", fields: [workshopId], references: [id], onUpdate: NoAction, onDelete: SetNull)
  training Training? @relation("detail_orders.training_id_TO_trainings", fields: [trainingId], references: [id], onUpdate: NoAction, onDelete: SetNull)

  @@map("detail_orders")
}
